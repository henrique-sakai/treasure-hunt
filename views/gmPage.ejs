<!DOCTYPE html>

<html>

    <head>
        <title>Geolocation</title>
        <meta charset="UTF-8">
        <meta name="viewport"
              content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

        <style>
                /* Always set the map height explicitly to define the size of the div
                * element that contains the map. */
                #map {
                    height: 50%;
                    width: 80%;
                    margin: auto;
                }
                /* Optional: Makes the sample page fill the window. */
                html, body {
                    height: 100%;
                    margin: 0;
                    padding: 0;
                }
                #description {
                    font-family: Roboto;
                    font-size: 15px;
                    font-weight: 300;
                }

                #infowindow-content .title {
                    font-weight: bold;
                }

                #infowindow-content {
                    display: none;
                }

                #map #infowindow-content {
                    display: inline;
                }

                .pac-card {
                    margin: 10px 10px 0 0;
                    border-radius: 2px 0 0 2px;
                    box-sizing: border-box;
                    -moz-box-sizing: border-box;
                    outline: none;
                    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
                    background-color: #fff;
                    font-family: Roboto;
                }

                #pac-container {
                    padding-bottom: 12px;
                    margin-right: 12px;
                }

                .pac-controls {
                    display: inline-block;
                    padding: 5px 11px;
                }

                .pac-controls label {
                    font-family: Roboto;
                    font-size: 13px;
                    font-weight: 300;
                }

                #pac-input {
                    background-color: #fff;
                    font-family: Roboto;
                    font-size: 15px;
                    font-weight: 300;
                    margin-left: 12px;
                    padding: 0 11px 0 13px;
                    text-overflow: ellipsis;
                    width: 400px;
                }

                #pac-input:focus {
                    border-color: #4d90fe;
                }

                #title {
                    color: #fff;
                    background-color: #4d90fe;
                    font-size: 25px;
                    font-weight: 500;
                    padding: 6px 12px;
                }

                #target {
                    width: 345px;
                }
            </style>

    </head>

    <body>
     
     <div style="width:80%; margin:auto">

        <p></p>
        <h2>Criar quest</h2>
        <p></p>

        <form action='' method="post">

            <div class="form-group">
                <label for="name">Nome da quest:</label>
                <input type="text" class="form-control" name="name" id="name">
            </div>

            <div class="form-group">
                <label for="clueText">Texto da dica:</label>
                <textarea type="text" class="form-control" name="clueText" id="clueText" rows="4"></textarea>
            </div>
            
            <p>Selecione no mapa o local</p>

            <div class="form-group">
                <label for="north">Norte:</label>
                <input id="north" type="number" step="any" class="form-control" name="north" readonly="readonly">
            </div>

            <div class="form-group">
                <label for="south">Sul:</label>
                <input id="south" type="number" step="any" class="form-control" name="south" readonly="readonly">
            </div>

            <div class="form-group">
                <label for="east">Leste:</label>
                <input id="east" type="number" step="any" class="form-control" name="east" readonly="readonly">
            </div>

            <div class="form-group">
                <label for="west">Oeste:</label>
                <input id="west" type="number" step="any" class="form-control" name="west" readonly="readonly">
            </div>

            <button id="saveBtn" type="submit" class="btn btn-primary">Salvar</button>
        </form>
        
    </div>

    <p></p>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>


    <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">



        function initAutocomplete() {

            var rectangle, bounds;
            var north = document.getElementById('north');
            var south = document.getElementById('south');
            var east = document.getElementById('east');
            var west = document.getElementById('west');

            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: -23.533773, lng: -46.625290},
                zoom: 13,
            });

            // Positionate the map at the user location and puts a rectangle on it
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    map.setCenter(pos);

                    createRect(pos.lat, pos.lng, map, north, south, east, west);

                    updateCoord(rectangle, north, south, east, west)
                }, function() {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            }
            function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                infoWindow.setPositMaion(pos);
                infoWindow.setContent(browserHasGeolocation ?
                    'Error: The Geolocation service failed.' :
                    'Error: Your browser doesn\'t support geolocation.');
                infoWindow.open(map);
            }

            //search engine
            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function() {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function() {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function(marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function(place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }

                    map.fitBounds(bounds);
                });

                center = map.getCenter();
                rectangle.setMap(null);

                createRect(map.getCenter().lat(), map.getCenter().lng(), map, north, south, east, west);

                updateCoord(rectangle, north, south, east, west);

            });

            function createRect(lat, lng, map, n, s, e, w) {
                bounds = {
                    north: lat + 0.005,
                    south: lat - 0.005,
                    east: lng + 0.005,
                    west: lng - 0.005,
                };
                rectangle = new google.maps.Rectangle({
                    bounds: bounds,
                    editable: true,
                    draggable: true
                });
                rectangle.addListener('bounds_changed', function() {
                    updateCoord(rectangle, n, s, e, w)
                });
                rectangle.setMap(map);
            }

            function updateCoord(rectangle, north, south, east, west) {
                var ne = rectangle.getBounds().getNorthEast();
                var sw = rectangle.getBounds().getSouthWest();
                north.value = ne.lat();
                south.value = sw.lat();
                east.value = ne.lng();
                west.value = sw.lng();rectangle.setMap(map);
            }
        }

    </script>

    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBV4PaT-tpXCdeGAW4e0mF_WAUC5GAMmBI&libraries=places&callback=initAutocomplete"></script>
    
    </body>

</html>